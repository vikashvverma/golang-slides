Introduction to Golang
30 May 2018
Tags: Golang, Basics

Vikash
Gopher
@_vikashvverma

* Agenda
- Introduction
- Why Go
- Variable & Inferred Typing
- Constants
- Printing Constants and Variables
- Packages and imports
- Code location
- Exported names
- Functions, signature, return values, named results
- Pointers

* Introduction
Developed by
- Robert Griesemer
- Rob Pike
- Ken Thompson(also developed Unix)

* Introduction
- 5th most loved language
- 3rd most wanted language

* Why Go
.image ./why-go2.png

* Why Go
- Simple
- Compiles straight to native code
- Static type System
- Performance
- No need of a Framework
- Great IDE support and debugging
- Can be compiled to any OS/architecture

* Variable & Inferred Typing

The var statement declares a list of variables with the type declared last.

    var (
        name     string
        age      int
        location string
    )

or even

    var (
        name, location  string
        age             int
    )

or one by one

    var name     string
    var age      int
    var location string

* Variable & Inferred Typing

A var declaration can include initializers, one per variable.

    var (
        name     string = "Black Panther"
        age      int    =  40
        location string = "Wakanda"
    )

If an initializer is present, the type can be omitted, the variable will take the type of the initializer (inferred typing)

    var (
        name     = "Black Panther"
        age      =  40
        location = "Wakanda"
    )

All initialized in same line

    var (
        name, location, age = "Black Panther", "Wakanda", 40
    )

* Variable & Inferred Typing

Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

.play -edit codes/variable.go

A variable can contain any type, including functions:

    func main() {
        action := func() {
            //doing something
        }
        action()
    }

* Constants

- Like variables but with const keyword
- Cannot be declared using := syntax

    const Pi = 3.14
    const (
            StatusOK                   = 200
            StatusCreated              = 201
            StatusAccepted             = 202
            StatusNonAuthoritativeInfo = 203
            StatusNoContent            = 204
            StatusResetContent         = 205
            StatusPartialContent       = 206
    )

* Constants

.play -edit codes/constant.go

* Printing Constants and Variables
- Using builtin *print* or *println* functions
- Using functions from *fmt* package

.play codes/print.go

* Packages and imports
- Every Go program is made up of packages. Programs start running in package main.
- Your executable must have a *main* function in order to start
- If you are developing library, you don't need a main function
    package main

    func main() {
        print("Hello, World!\n")
    }
Import statement examples:

    import "fmt"
    import "math/rand"

Or grouped:

    import (
        "fmt"
        "math/rand"
    )

* Code location
- Make sure GOPATH environment variable is set
    $ ls $GOPATH
    bin	pkg	src
- *bin*: Compiled versio of binaries
- *pkg*:  Contains the compiled versions of the available libraries so the compiler can link against them without recompiling them.
- *src*: Contains all the Go source code organized by import path
    $ ls $GOPATH/src
    bitbucket.org github.com golang.org jnk-centos-git

    $ls $GOPATH/src/jnk-centos-git/imaging
    imaging-data-model imaging-dev-box imaging-fe imaging-service

- When starting a new program or library, it is recommended to do so inside the src folder, using a fully qualified path:
    github.com/<your username>/<project name>

* Exported names
- After importing a package, you can refer to the names it exports
- In Go, a name is exported if it begins with a capital letter
- *Foo* is an exported name, as is *FOO*. The name *foo* is not exported.
.play -edit codes/export-invalid.go

* Exported names
.play -edit codes/export-valid.go

* Functions, signature, return values, named results
- A function can take zero or more arguments
- The type comes after the variable name
- Functions can be defined to return any number of values that are always typed
.play -edit codes/function.go

* Functions, signature, return values, named results
- When type of variables are same, declare type once
.play -edit codes/function-type-once.go

* Functions, signature, return values, named results
- Function can return multiple values
.play -edit codes/function-multiple-return.go

* Functions, signature, return values, named results
- Return parameter can be named
- If the result parameters are named, a return statement without arguments returns the current values of the results
.play -edit codes/function-named-parameter.go

* Variadic Function
- There is a special form available for the last parameter in a Go function:
.play -edit codes/function-variadic.go
- [...] indicates that function takes zero or more of those parameters
- Useful when we need optional parameters

* Closures
- It is possible to create functions inside of functions:
-   Similar to JavaScript
.play -edit codes/function-closure.go

* Recursion: Function is able to call itself

.play -edit codes/recursion.go
.image ./recursion.gif

* Pointers
- Basics

Passing by _reference_ means the called functions' parameter will be the same as the callers' passed argument
(not the value, but the identity - the variable itself).

Passing by _value_ means the called functions' parameter will be a copy of the callers' passed argument.

.image ./pass-scheme.gif

* Pointers in Go

Pointer rules:

- A _variable_ is a piece of storage, containing a value.
- A _pointer_ value is a _address_ of the variable.
- Not every value has an address, but every variable does.
- With a pointer we can read or update the value of a variable _indirectly_, without using or even knowing the name of the variable.

Pointer declaration and usage:

    var x = 1
    p := &x        // p, of type *int, points to x
    println(*p)    // => 1
    *p = 2         // same as x = 2
    println(*p)    // => 2

* Pointers in Go

.html ./star-and-amp-mnemonic.html


* New

Another way to get a pointer is to use the built-in _new()_ function:

    func one (xPtr *int) {
        *xPtr = 1
    }

    func main () {
        xPtr := new(int)
        one(xPtr)
        fmt.Println(*xPtr) // x is 1
    }

_new()_ takes a type as an argument, allocates enough memory to fit a value of that type and returns a pointer to it.
