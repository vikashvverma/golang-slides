Introduction to Golang
23 May 2018
Tags: Golang, Basics

Vikash
Gopher
@_vikashvverma

* Agenda
- Variable & Inferred Typing
- Constants
- Printing Constants and Variables
- Packages and imports
- Code location
- Exported names
- Functions, signature, return values, named results
- Pointers
- Mutability

* Variable & Inferred Typing

The var statement declares a list of variables with the type declared last.

    var (
        name     string
        age      int
        location string
    )

or even

    var (
        name, location  string
        age             int
    )

or one by one

    var name     string
    var age      int
    var location string

* Variable & Inferred Typing

A var declaration can include initializers, one per variable.

    var (
        name     string = "Black Panther"
        age      int    =  40
        location string = "Wakanda"
    )

If an initializer is present, the type can be omitted, the variable will take the type of the initializer (inferred typing)

    var (
        name     = "Black Panther"
        age      =  40
        location = "Wakanda"
    )

All initialized in same line

    var (
        name, location, age = "Black Panther", "Wakanda", 40
    )

* Variable & Inferred Typing

Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

.play -edit codes/variable.go

A variable can contain any type, including functions:

    func main() {
        action := func() {
            //doing something
        }
        action()
    }

* Constants

- Like variables but with const keyword
- Cannot be declared using := syntax

    const Pi = 3.14
    const (
            StatusOK                   = 200
            StatusCreated              = 201
            StatusAccepted             = 202
            StatusNonAuthoritativeInfo = 203
            StatusNoContent            = 204
            StatusResetContent         = 205
            StatusPartialContent       = 206
    )

* Constants

.play -edit codes/constant.go

* Printing Constants and Variables
- Using builtin *print* or *println* functions
- Using functions from *fmt* package

.play codes/print.go

* Packages and imports
- Every Go program is made up of packages. Programs start running in package main.
- Your executable must have a *main* function in order to start
- If you are developing library, you don't need a main function
    package main

    func main() {
        print("Hello, World!\n")
    }
Import statement examples:

    import "fmt"
    import "math/rand"

Or grouped:

    import (
        "fmt"
        "math/rand"
    )
